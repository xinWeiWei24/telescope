---
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: nodeclass0
spec:
  amiFamily: AL2 # Amazon Linux 2
  role: "${ROLE_NAME}"
  subnetSelectorTerms:
    - id: ${SUBNET_ID_0}
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: ${CLUSTER_NAME}
  amiSelectorTerms:
    - alias: al2@latest
  tags:
    owner: "${OWNER}"
    scenario: "${SCENARIO}"
    deletion_due_time: "${DELETION_DUE_TIME}"
    run_id: "${RUN_ID}"
    KarpenterNodePoolName: nodeclass0
    NodeType: nodeclass0
    karpenter.sh/discovery: ${CLUSTER_NAME}
---
apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: userpool0
spec:
  disruption:
    consolidationPolicy: WhenEmpty
    consolidateAfter: 1s
    budgets:
      - nodes: "100%"
  template:
    metadata:
      labels:
        slo: "true"
    spec:
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: nodeclass0
      requirements:
        - key: kubernetes.io/arch
          operator: In
          values: ["amd64"]
        - key: kubernetes.io/os
          operator: In
          values: ["linux"]
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["on-demand"]
        - key: karpenter.k8s.aws/instance-category
          operator: In
          values: ["m"]
        - key: karpenter.k8s.aws/instance-generation
          operator: Gt
          values: ["2"]
        - key: karpenter.k8s.aws/instance-cpu
          operator: In
          values: ["4"]
      taints:
        - key: slo
          value: "true"
          effect: NoSchedule
  limits:
    cpu: 2000
